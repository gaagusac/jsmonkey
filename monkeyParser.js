/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var monkeyParser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[1,21],$V2=[1,14],$V3=[1,15],$V4=[1,10],$V5=[1,20],$V6=[1,11],$V7=[1,27],$V8=[1,16],$V9=[1,17],$Va=[1,18],$Vb=[1,19],$Vc=[1,22],$Vd=[1,23],$Ve=[1,24],$Vf=[1,25],$Vg=[1,26],$Vh=[5,13,14,18,20,22,23,26,29,30,38,39,40,41,43,50,51,53,54],$Vi=[5,13,18,20,22,23,26,29,30,38,39,40,41,50,51,53],$Vj=[1,41],$Vk=[1,33],$Vl=[1,34],$Vm=[1,35],$Vn=[1,36],$Vo=[1,37],$Vp=[1,38],$Vq=[1,39],$Vr=[1,40],$Vs=[1,42],$Vt=[5,13,14,16,18,20,22,23,26,29,30,32,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,54,55,56],$Vu=[5,13,16,18,20,22,23,26,29,30,32,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,55,56],$Vv=[1,81],$Vw=[1,83],$Vx=[16,32,55],$Vy=[30,32],$Vz=[5,13,16,18,20,22,23,26,29,30,32,37,38,39,40,41,42,43,46,47,48,49,50,51,53,55,56],$VA=[5,13,16,18,20,22,23,26,29,30,32,37,38,39,40,41,50,51,53,55,56],$VB=[5,13,16,18,20,22,23,26,29,30,32,37,38,39,40,41,46,47,50,51,53,55,56],$VC=[1,95],$VD=[16,32];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"program":3,"statements":4,"EOF":5,"statement":6,"let_statement":7,"return_statement":8,"expression_statement":9,"while_statement":10,"break_statement":11,"continue_statement":12,"WHILE":13,"LPAREN":14,"expression":15,"RPAREN":16,"block_statement":17,"BREAK":18,"break_statement_option0":19,"CONTINUE":20,"continue_statement_option0":21,"LET":22,"IDENT":23,"ASSIGN":24,"let_statement_option0":25,"RETURN":26,"return_statement_option0":27,"expression_statement_option0":28,"LBRACE":29,"RBRACE":30,"param_list":31,"COMMA":32,"param":33,"expression_list":34,"expression_pairs":35,"expression_pair":36,"COLON":37,"INT":38,"STRING":39,"TRUE":40,"FALSE":41,"PLUS":42,"MINUS":43,"ASTERISK":44,"SLASH":45,"EQ":46,"NOT_EQ":47,"LT":48,"GT":49,"BANG":50,"IF":51,"ELSE":52,"FUNCTION":53,"LBRACKET":54,"RBRACKET":55,"SEMICOLON":56,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",13:"WHILE",14:"LPAREN",16:"RPAREN",18:"BREAK",20:"CONTINUE",22:"LET",23:"IDENT",24:"ASSIGN",26:"RETURN",29:"LBRACE",30:"RBRACE",32:"COMMA",37:"COLON",38:"INT",39:"STRING",40:"TRUE",41:"FALSE",42:"PLUS",43:"MINUS",44:"ASTERISK",45:"SLASH",46:"EQ",47:"NOT_EQ",48:"LT",49:"GT",50:"BANG",51:"IF",52:"ELSE",53:"FUNCTION",54:"LBRACKET",55:"RBRACKET",56:"SEMICOLON"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[10,5],[11,2],[12,2],[7,5],[8,3],[9,2],[17,3],[31,3],[31,1],[33,1],[34,3],[34,1],[35,3],[35,1],[36,3],[15,1],[15,1],[15,1],[15,1],[15,1],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,2],[15,2],[15,5],[15,7],[15,5],[15,4],[15,4],[15,3],[15,3],[15,2],[15,4],[15,3],[15,2],[19,0],[19,1],[21,0],[21,1],[25,0],[25,1],[27,0],[27,1],[28,0],[28,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
  program = new Program($$[$0-1]); return program; 
break;
case 2:
  $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3:
  this.$ = [$$[$0]]; 
break;
case 4: case 5:
  this.$ = $$[$0]; 
break;
case 6: case 7: case 8: case 9:
 this.$ = $$[$0]; 
break;
case 10:

         var token = new MonkeyToken('WHILE', 'while', _$[$0-4].first_line, _$[$0-4].first_column);
         this.$ = new WhileStatement(token, $$[$0-2], $$[$0]);
      
break;
case 11:

        var token = new MonkeyToken('BREAK', 'break', _$[$0-1].first_line, _$[$0-1].first_column);
        this.$ = new BreakStatement(token);
    
break;
case 12:

        var token = new MonkeyToken('CONTINUE', 'continue', _$[$0-1].first_line, _$[$0-1].first_column);
        this.$ = new ContinueStatement(token);
    
break;
case 13:

            var token = new MonkeyToken('LET', 'let', _$[$0-4].first_line, _$[$0-4].first_column);
            var ident = new Identifier(new MonkeyToken('IDENT', $$[$0-3], _$[$0-3].first_line, _$[$0-3].first_column), $$[$0-3]);
            this.$ = new LetStatement(token, ident, $$[$0-1]);
        
break;
case 14:

            var token = new MonkeyToken('RETURN', 'return', _$[$0-2].first_line, _$[$0-2].first_column);
            this.$ = new ReturnStatement(token, $$[$0-1]);
      
break;
case 15:

        this.$ = new ExpressionStatement($$[$0-1].token, $$[$0-1]);
      
break;
case 16:

        var token = new MonkeyToken('LBRACE', $$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column);
        this.$ = new BlockStatement(token, $$[$0-1]);
      
break;
case 17: case 20:

        $$[$0-2].push($$[$0]); this.$ = $$[$0-2];
      
break;
case 18: case 21:

        this.$ = [$$[$0]];
      
break;
case 19: case 29:

        var token = new MonkeyToken('IDENT', $$[$0], _$[$0].first_line, _$[$0].first_column);
        this.$ = new Identifier(token, $$[$0]);
      
break;
case 22:

        $$[$0-2].set($$[$0]['key'], $$[$0]['value']);
        this.$ = $$[$0-2];
      
break;
case 23:

        const map = new Map();
        map.set($$[$0]['key'], $$[$0]['value']);
        this.$ = map;
      
break;
case 24:

        this.$ = {'key': $$[$0-2], 'value': $$[$0]};
    
break;
case 25:

        var token = new MonkeyToken('INT', $$[$0], _$[$0].first_line, _$[$0].first_column);
        this.$ = new IntegerLiteral(token, Number($$[$0]));
      
break;
case 26:

        var token = new MonkeyToken('STRING', $$[$0], _$[$0].first_line, _$[$0].first_column);
        this.$ = new StringLiteral(token, $$[$0].slice(1, -1));
      
break;
case 27:

        var token = new MonkeyToken('TRUE', $$[$0], _$[$0].first_column, _$[$0].first_column);
        this.$ = new BooleanLiteral(token, true);
      
break;
case 28:

        var token = new MonkeyToken('FALSE', $$[$0], _$[$0].first_column, _$[$0].first_colun);
        this.$ = new BooleanLiteral(token, false);
      
break;
case 30:

        this.$ = $$[$0-1];
      
break;
case 31:

        var token = new MonkeyToken('PLUS', $$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column);
        this.$ = new InfixExpression(token, $$[$0-2], $$[$0-1], $$[$0]);
      
break;
case 32:

        var token = new MonkeyToken('MINUS', $$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column);
        this.$ = new InfixExpression(token, $$[$0-2], $$[$0-1], $$[$0]);
      
break;
case 33:

        var token = new MonkeyToken('ASTERISK', $$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column);
        this.$ = new InfixExpression(token, $$[$0-2], $$[$0-1], $$[$0]);
      
break;
case 34:

        var token = new MonkeyToken('SLASH', $$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column);
        this.$ = new InfixExpression(token, $$[$0-2], $$[$0-1], $$[$0]);
      
break;
case 35:

        var token = new MonkeyToken('EQ', $$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column);
        this.$ = new InfixExpression(token, $$[$0-2], $$[$0-1], $$[$0]);
      
break;
case 36:

        var token = new MonkeyToken('NOT_EQ', $$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column);
        this.$ = new InfixExpression(token, $$[$0-2], $$[$0-1], $$[$0]);
      
break;
case 37:

        var token = new MonkeyToken('LT', $$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column);
        this.$ = new InfixExpression(token, $$[$0-2], $$[$0-1], $$[$0]);
      
break;
case 38:

        var token = new MonkeyToken('GT', $$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column);
        this.$ = new InfixExpression(token, $$[$0-2], $$[$0-1], $$[$0]);
      
break;
case 39:

        var token = new MonkeyToken('MINUS', $$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column);
        this.$ = new PrefixExpression(token, $$[$0-1], $$[$0]);
      
break;
case 40:

        var token = new MonkeyToken('BANG', $$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column);
        this.$ = new PrefixExpression(token, $$[$0-1], $$[$0]);
      
break;
case 41:

        var token = new MonkeyToken('IF', $$[$0-4], _$[$0-4].first_line, _$[$0-4].first_column);
        this.$ = new IfExpression(token, $$[$0-2], $$[$0]);
      
break;
case 42:

        var token = new MonkeyToken('IF', $$[$0-6], _$[$0-6].first_line, _$[$0-6].first_column);
        this.$ = new IfExpression(token, $$[$0-4], $$[$0-2], $$[$0]);
      
break;
case 43:

        var token = new MonkeyToken('FUNCTION', $$[$0-4], _$[$0-4].first_line, _$[$0-4].first_column);
        this.$ = new FunctionLiteral(token, $$[$0-2], $$[$0]);
      
break;
case 44:

        var token = new MonkeyToken('FUNCTION', $$[$0-3], _$[$0-3].first_line, _$[$0-3].first_column);
        this.$ = new FunctionLiteral(token, [], $$[$0]);
      
break;
case 45:

        var token = new MonkeyToken('LPAREN', $$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column);
        this.$ = new CallExpression(token, $$[$0-3], $$[$0-1]);
      
break;
case 46:

        var token = new MonkeyToken('LPAREN', $$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column);
        this.$ = new CallExpression(token, $$[$0-2], []);
      
break;
case 47:

        var token = new MonkeyToken('LBRACKET', $$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column);
        this.$ = new ArrayLiteral(token, $$[$0-1]);
      
break;
case 48:

        var token = new MonkeyToken('LBRACKET', $$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column);
        this.$ = new ArrayLiteral(token, []);
      
break;
case 49:

        var token = new MonkeyToken('LBRACKET', $$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column);
        this.$ = new IndexExpression(token, $$[$0-3], $$[$0-1]);
      
break;
case 50:

        var token = new MonkeyToken('LBRACE', $$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column);
        this.$ = new HashLiteral(token, $$[$0-1]);
      
break;
case 51:

        var token = new MonkeyToken('LBRACE', $$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column);
        this.$ = new HashLiteral(token, new Map());
      
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:$V0,14:$V1,15:12,18:$V2,20:$V3,22:$V4,23:$V5,26:$V6,29:$V7,38:$V8,39:$V9,40:$Va,41:$Vb,43:$Vc,50:$Vd,51:$Ve,53:$Vf,54:$Vg},{1:[3]},{5:[1,28],6:29,7:4,8:5,9:6,10:7,11:8,12:9,13:$V0,14:$V1,15:12,18:$V2,20:$V3,22:$V4,23:$V5,26:$V6,29:$V7,38:$V8,39:$V9,40:$Va,41:$Vb,43:$Vc,50:$Vd,51:$Ve,53:$Vf,54:$Vg},o($Vh,[2,3]),o($Vh,[2,4]),o($Vh,[2,5]),o($Vh,[2,6]),o($Vh,[2,7]),o($Vh,[2,8]),o($Vh,[2,9]),{23:[1,30]},{14:$V1,15:31,23:$V5,29:$V7,38:$V8,39:$V9,40:$Va,41:$Vb,43:$Vc,50:$Vd,51:$Ve,53:$Vf,54:$Vg},o($Vi,[2,60],{28:32,14:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,54:$Vs,56:[1,43]}),{14:[1,44]},o($Vh,[2,52],{19:45,56:[1,46]}),o($Vh,[2,54],{21:47,56:[1,48]}),o($Vt,[2,25]),o($Vt,[2,26]),o($Vt,[2,27]),o($Vt,[2,28]),o($Vt,[2,29]),{14:$V1,15:49,23:$V5,29:$V7,38:$V8,39:$V9,40:$Va,41:$Vb,43:$Vc,50:$Vd,51:$Ve,53:$Vf,54:$Vg},{14:$V1,15:50,23:$V5,29:$V7,38:$V8,39:$V9,40:$Va,41:$Vb,43:$Vc,50:$Vd,51:$Ve,53:$Vf,54:$Vg},{14:$V1,15:51,23:$V5,29:$V7,38:$V8,39:$V9,40:$Va,41:$Vb,43:$Vc,50:$Vd,51:$Ve,53:$Vf,54:$Vg},{14:[1,52]},{14:[1,53]},{14:$V1,15:56,23:$V5,29:$V7,34:54,38:$V8,39:$V9,40:$Va,41:$Vb,43:$Vc,50:$Vd,51:$Ve,53:$Vf,54:$Vg,55:[1,55]},{14:$V1,15:60,23:$V5,29:$V7,30:[1,58],35:57,36:59,38:$V8,39:$V9,40:$Va,41:$Vb,43:$Vc,50:$Vd,51:$Ve,53:$Vf,54:$Vg},{1:[2,1]},o($Vh,[2,2]),{24:[1,61]},o($Vi,[2,58],{27:62,14:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,54:$Vs,56:[1,63]}),o($Vh,[2,15]),{14:$V1,15:64,23:$V5,29:$V7,38:$V8,39:$V9,40:$Va,41:$Vb,43:$Vc,50:$Vd,51:$Ve,53:$Vf,54:$Vg},{14:$V1,15:65,23:$V5,29:$V7,38:$V8,39:$V9,40:$Va,41:$Vb,43:$Vc,50:$Vd,51:$Ve,53:$Vf,54:$Vg},{14:$V1,15:66,23:$V5,29:$V7,38:$V8,39:$V9,40:$Va,41:$Vb,43:$Vc,50:$Vd,51:$Ve,53:$Vf,54:$Vg},{14:$V1,15:67,23:$V5,29:$V7,38:$V8,39:$V9,40:$Va,41:$Vb,43:$Vc,50:$Vd,51:$Ve,53:$Vf,54:$Vg},{14:$V1,15:68,23:$V5,29:$V7,38:$V8,39:$V9,40:$Va,41:$Vb,43:$Vc,50:$Vd,51:$Ve,53:$Vf,54:$Vg},{14:$V1,15:69,23:$V5,29:$V7,38:$V8,39:$V9,40:$Va,41:$Vb,43:$Vc,50:$Vd,51:$Ve,53:$Vf,54:$Vg},{14:$V1,15:70,23:$V5,29:$V7,38:$V8,39:$V9,40:$Va,41:$Vb,43:$Vc,50:$Vd,51:$Ve,53:$Vf,54:$Vg},{14:$V1,15:71,23:$V5,29:$V7,38:$V8,39:$V9,40:$Va,41:$Vb,43:$Vc,50:$Vd,51:$Ve,53:$Vf,54:$Vg},{14:$V1,15:56,16:[1,73],23:$V5,29:$V7,34:72,38:$V8,39:$V9,40:$Va,41:$Vb,43:$Vc,50:$Vd,51:$Ve,53:$Vf,54:$Vg},{14:$V1,15:74,23:$V5,29:$V7,38:$V8,39:$V9,40:$Va,41:$Vb,43:$Vc,50:$Vd,51:$Ve,53:$Vf,54:$Vg},o($Vh,[2,61]),{14:$V1,15:75,23:$V5,29:$V7,38:$V8,39:$V9,40:$Va,41:$Vb,43:$Vc,50:$Vd,51:$Ve,53:$Vf,54:$Vg},o($Vh,[2,11]),o($Vh,[2,53]),o($Vh,[2,12]),o($Vh,[2,55]),{14:$Vj,16:[1,76],42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,54:$Vs},o($Vu,[2,39],{14:$Vj,54:$Vs}),o($Vu,[2,40],{14:$Vj,54:$Vs}),{14:$V1,15:77,23:$V5,29:$V7,38:$V8,39:$V9,40:$Va,41:$Vb,43:$Vc,50:$Vd,51:$Ve,53:$Vf,54:$Vg},{16:[1,79],23:$Vv,31:78,33:80},{32:$Vw,55:[1,82]},o($Vt,[2,48]),o($Vx,[2,21],{14:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,54:$Vs}),{30:[1,84],32:[1,85]},o($Vt,[2,51]),o($Vy,[2,23]),{14:$Vj,37:[1,86],42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,54:$Vs},{14:$V1,15:87,23:$V5,29:$V7,38:$V8,39:$V9,40:$Va,41:$Vb,43:$Vc,50:$Vd,51:$Ve,53:$Vf,54:$Vg},o($Vh,[2,14]),o($Vh,[2,59]),o($Vz,[2,31],{14:$Vj,44:$Vm,45:$Vn,54:$Vs}),o($Vz,[2,32],{14:$Vj,44:$Vm,45:$Vn,54:$Vs}),o($Vu,[2,33],{14:$Vj,54:$Vs}),o($Vu,[2,34],{14:$Vj,54:$Vs}),o($VA,[2,35],{14:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,48:$Vq,49:$Vr,54:$Vs}),o($VA,[2,36],{14:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,48:$Vq,49:$Vr,54:$Vs}),o($VB,[2,37],{14:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,54:$Vs}),o($VB,[2,38],{14:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,54:$Vs}),{16:[1,88],32:$Vw},o($Vt,[2,46]),{14:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,54:$Vs,55:[1,89]},{14:$Vj,16:[1,90],42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,54:$Vs},o($Vt,[2,30]),{14:$Vj,16:[1,91],42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,54:$Vs},{16:[1,92],32:[1,93]},{17:94,29:$VC},o($VD,[2,18]),o($VD,[2,19]),o($Vt,[2,47]),{14:$V1,15:96,23:$V5,29:$V7,38:$V8,39:$V9,40:$Va,41:$Vb,43:$Vc,50:$Vd,51:$Ve,53:$Vf,54:$Vg},o($Vt,[2,50]),{14:$V1,15:60,23:$V5,29:$V7,36:97,38:$V8,39:$V9,40:$Va,41:$Vb,43:$Vc,50:$Vd,51:$Ve,53:$Vf,54:$Vg},{14:$V1,15:98,23:$V5,29:$V7,38:$V8,39:$V9,40:$Va,41:$Vb,43:$Vc,50:$Vd,51:$Ve,53:$Vf,54:$Vg},o($Vi,[2,56],{25:99,14:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,54:$Vs,56:[1,100]}),o($Vt,[2,45]),o($Vt,[2,49]),{17:101,29:$VC},{17:102,29:$VC},{17:103,29:$VC},{23:$Vv,33:104},o($Vt,[2,44]),{4:105,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:$V0,14:$V1,15:12,18:$V2,20:$V3,22:$V4,23:$V5,26:$V6,29:$V7,38:$V8,39:$V9,40:$Va,41:$Vb,43:$Vc,50:$Vd,51:$Ve,53:$Vf,54:$Vg},o($Vx,[2,20],{14:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,54:$Vs}),o($Vy,[2,22]),o($Vy,[2,24],{14:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,54:$Vs}),o($Vh,[2,13]),o($Vh,[2,57]),o($Vh,[2,10]),o($Vt,[2,41],{52:[1,106]}),o($Vt,[2,43]),o($VD,[2,17]),{6:29,7:4,8:5,9:6,10:7,11:8,12:9,13:$V0,14:$V1,15:12,18:$V2,20:$V3,22:$V4,23:$V5,26:$V6,29:$V7,30:[1,107],38:$V8,39:$V9,40:$Va,41:$Vb,43:$Vc,50:$Vd,51:$Ve,53:$Vf,54:$Vg},{17:108,29:$VC},o([5,13,14,16,18,20,22,23,26,29,30,32,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56],[2,16]),o($Vt,[2,42])],
defaultActions: {28:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const LetStatement = require('./monkey_node').LetStatement;
    const ReturnStatement = require('./monkey_node').ReturnStatement;
    const Identifier = require('./monkey_node').Identifier;
    const IntegerLiteral = require('./monkey_node').IntegerLiteral;
    const BooleanLiteral = require('./monkey_node').BooleanLiteral;
    const PrefixExpression = require('./monkey_node').PrefixExpression;
    const InfixExpression = require('./monkey_node').InfixExpression;
    const ExpressionStatement = require('./monkey_node').ExpressionStatement;
    const MonkeyToken = require('./monkey_token').MonkeyToken;
    const IfExpression = require('./monkey_node').IfExpression;
    const FunctionLiteral = require('./monkey_node').FunctionLiteral;
    const CallExpression = require('./monkey_node').CallExpression;
    const BlockStatement = require('./monkey_node').BlockStatement;
    const StringLiteral = require('./monkey_node').StringLiteral;
    const ArrayLiteral = require('./monkey_node').ArrayLiteral;
    const IndexExpression = require('./monkey_node').IndexExpression;
    const HashLiteral = require('./monkey_node').HashLiteral;
    const Program = require('./monkey_node').Program;
    const WhileStatement = require('./monkey_node').WhileStatement;
    const BreakStatement = require('./monkey_node').BreakStatement;
    const ContinueStatement = require('./monkey_node').ContinueStatement;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 53;
break;
case 1:return 22;
break;
case 2:return 40;
break;
case 3:return 41;
break;
case 4:return 51;
break;
case 5:return 52;
break;
case 6:return 26;
break;
case 7:return 13;
break;
case 8:return 18
break;
case 9:return 20;
break;
case 10:return 46;
break;
case 11:return 47;
break;
case 12:return 24;
break;
case 13:return 42;
break;
case 14:return 43;
break;
case 15:return 44;
break;
case 16:return 50;
break;
case 17:return 45;
break;
case 18:return 48;
break;
case 19:return 49;
break;
case 20:return 32;
break;
case 21:return 56;
break;
case 22:return 14;
break;
case 23:return 16;
break;
case 24:return 29;
break;
case 25:return 30;
break;
case 26:return 54;
break;
case 27:return 55;
break;
case 28:return 37;
break;
case 29:return 39;
break;
case 30:return 23;
break;
case 31:return 38;
break;
case 32:/* skip whitespace */
break;
case 33:return 'INVALID';
break;
case 34:return 5;
break;
}
},
rules: [/^(?:fn\b)/,/^(?:let\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:return\b)/,/^(?:while\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:==)/,/^(?:!=)/,/^(?:=)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:!)/,/^(?:\/)/,/^(?:<)/,/^(?:>)/,/^(?:,)/,/^(?:;)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?::)/,/^(?:"[^\"]*")/,/^(?:([a-zA-Z_][a-zA-Z0-9_]*))/,/^(?:([0-9])+)/,/^(?:\s+)/,/^(?:.)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = monkeyParser;
exports.Parser = monkeyParser.Parser;
exports.parse = function () { return monkeyParser.parse.apply(monkeyParser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}